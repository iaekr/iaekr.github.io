install.packages("imager")
data <- read.csv("history-of-rock-spotify - Copy.csv")
data <- read.csv("history-of-rock-spotify - Copy.csv")
str(data)
View(data)
data <- read.csv("history-of-rock-spotify - Copy.csv")
str(data)
head(data)
data <- read.csv("history-of-rock-spotify - Copy.csv")
glimpse(data)
library(tidyverse)
data <- read.csv("history-of-rock-spotify - Copy.csv")
glimpse(data)
dance <- data %>% arrange(desc(danceability))
head(dance)
dance <- data %>% arrange(desc(danceability)) %>%
group_by(release_date)
head(dance)
dr <- read.csv(covidsns.csv)
library(readr)
covidsns <- read_csv("~/University/Y2S2/NM2103 R Analysis/WK9 Tutorial/covidsns.csv")
View(covidsns)
dr <- read.csv(covidsns.csv)
setwd("~/University/Y2S2/NM2103 R Analysis/WK9 Tutorial")
dr <- read.csv(covidsns.csv)
dr <- read.csv(covidsns.csv)
library(psych)
install.packages(psych)
library(psych)
dr <- read.csv("covidsns.csv")
df <- read.csv("covidsns.csv")
print(df)
install.packages("psych")
library("psych")
library("psych")
str(df)
View(df)
df$NSuse <- apply (df[,13:18],1,mean
df$NSuse <- apply (df[,13:18],1,mean)
df$Threat <- apply (df[,3:5],1,mean)
df$NSuse <- apply (df[,13:18],1,mean)
str(df)
View(df)
summary(df$Threat)
print(sd(df$Threat))
print(sd(df$NSuse))
##Checking Reliability
library(ltm)
install.packages(ltm)
install.packages("ltm")
##Checking Reliability
library(ltm)
library("psych")
m)
library(ltm)
library(psych)
Threat <- data.frame(df[,3:5])
cronbach.alpha(Threat)
SNSuse<-data.frame(df[,13:18])
cronback.alpha(SNSuse)
library(ltm)
library(psych)
Threat <- data.frame(df[,3:5])
cronbach.alpha(Threat)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
df <- read.csv("covidsns.csv")
str(df)
View(df)
df$Threat <- apply (df[,3:5],1,mean)
df$NSuse <- apply(df[,13:18],1,mean)
str(df)
View(df)
summary(df$Threat)
print(sd(df$Threat))
print(sd(df$NSuse))
##Checking Reliability
library(ltm)
library(psych)
Threat <- data.frame(df[,3:5])
cronbach.alpha(Threat)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
df$Threat <-apply(df[,3:5],1,mean)
df$NSuse <-apply(df[,13:18],1,mean)
print(sd(df$Threat))
print(sd(df$NSuse))
Threat <- data.frame(df[,3:5])
cronbach.alpha(Threat)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
##The correlation test
cor.test("df$Threat", "df$SNSuse")
df$NSuse <-apply(df[,13:18],1,mean)
str(df)
View(df)
##The correlation test
cor.test(df$Threat, df$SNSuse)
df$SNSuse <-apply(df[,13:18],1,mean)
print(sd(df$SNSuse))
str(df)
cronbach.alpha(SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
df$Anger <- apply(df[,6:8],1,mean)
df$Anxiety <- apply(df[,9:13],1,mean)
str(df)
View(df)
df <- read.csv("covidsns.csv")
str(df)
View(df)
df$Threat <-apply(df[,3:5],1,mean)
df$SNSuse <-apply(df[,13:18],1,mean)
str(df)
View(df)
summary(df$Threat)
print(sd(df$Threat))
print(sd(df$SNSuse))
##Checking Reliability
library(ltm)
library(psych)
Threat <- data.frame(df[,3:5])
cronbach.alpha(Threat)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
##Group activity, Exercise
df$Anger <- apply(df[,6:8],1,mean)
df$Anxiety <- apply(df[,9:13],1,mean)
str(df)
View(df)
Anger <- data.frame(df[6:8])
cronbach.alpha(Anger)
Anxiety <- data.frame(df[9:13])
cronbach.alpha(Anxiert)
Anger <- data.frame(df[6:8])
cronbach.alpha(Anger)
Anxiety <- data.frame(df[9:13])
cronbach.alpha(Anxiety)
cor.test(df$Anger, df$SNSuse)
cor.test(df$Anxiety, df$SNSuse)
df$Anger <- apply(df[,6:8],1,mean)
df$Anxiety <- apply(df[,9:13],1,mean)
str(df)
View(df)
print(sd(df$Anger))
print(sd(df$Anxiety))
Anger <- data.frame(df[6:8])
cronbach.alpha(Anger)
Anxiety <- data.frame(df[9:13])
cronbach.alpha(Anxiety)
cor.test(df$Anger, df$SNSuse)
cor.test(df$Anxiety, df$SNSuse)
cor.test(df$SNSuse, df$Anger)
cor.test(df$Anger, df$SNSuse)
cor.test(df$Anxiety, df$SNSuse)
cor.test(df$SNSuse, df$Anger)
df <- read.csv("covidsns.csv")
str(df)
View(df)
df$Threat <-apply(df[,3:5],1,mean)
df$SNSuse <-apply(df[,13:18],1,mean)
str(df)
View(df)
summary(df$Threat)
print(sd(df$Threat))
print(sd(df$SNSuse))
##Checking Reliability
library(ltm)
library(psych)
Threat <- data.frame(df[,3:5])
cronbach.alpha(Threat)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
##The correlation test
cor.test(df$Threat, df$SNSuse)
##Group activity, Exercise
df$Anger <- apply(df[,6:8],1,mean)
df$Anxiety <- apply(df[,9:13],1,mean)
str(df)
View(df)
summary(df)
print(sd(df$Anger))
print(sd(df$Anxiety))
Anger <- data.frame(df[6:8])
cronbach.alpha(Anger)
Anxiety <- data.frame(df[9:13])
cronbach.alpha(Anxiety)
cor.test(df$Anger, df$SNSuse)
cor.test(df$Anxiety, df$SNSuse)
cor.test(df$SNSuse, df$Anger)
##The correlation test
cor.test(df$Threat, df$SNSuse)
df$Anger <- apply(df[,6:8],1,mean)
df$Anxiety <- apply(df[,9:13],1,mean)
str(df)
View(df)
summary(df)
print(sd(df$Anger))
print(sd(df$Anxiety))
Anger <- data.frame(df[6:8])
cronbach.alpha(Anger)
Anxiety <- data.frame(df[9:13])
cronbach.alpha(Anxiety)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
cor.test(df$Anger, df$SNSuse)
cor.test(df$Anxiety, df$SNSuse)
df$SNSuse <-apply(df[,13:18],1,mean)
df$Anger <- apply(df[,6:8],1,mean)
df$Anxiety <- apply(df[,9:13],1,mean)
str(df)
View(df)
summary(df)
print(sd(df$Anger))
print(sd(df$Anxiety))
Anger <- data.frame(df[6:8])
cronbach.alpha(Anger)
Anxiety <- data.frame(df[9:13])
cronbach.alpha(Anxiety)
SNSuse<-data.frame(df[,13:18])
cronbach.alpha(SNSuse)
cor.test(df$Anger, df$SNSuse)
cor.test(df$Anxiety, df$SNSuse)
print(sd(df$SNSuse))
setwd("~/University/Y2S2/NM2207/Week 9")
library(tidyverse)
my_data <- read.csv("laptop_data.csv")
library(tidyverse)
my_data <- read.csv("laptop_data.csv")
library(tidyverse)
my_data <- read.csv("laptop_data.csv")
library(tidyverse)
my_data <- read.csv("laptop_data.csv")
library(tidyverse)
my_data <- read.csv("laptop_data.csv")
library(readr)
laptop_data <- read_csv("~/University/Y2S2/NM2207/Week 8/laptop_data.csv")
View(laptop_data)
library(tidyverse)
my_data <- read.csv("laptop_data.csv")
glimpse(my_data)
#Define server logic required to draw a histogram
server<- function(input, output){
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize,col='darkorchid', xlab="Sample", main="Standard Normally Distributed Sample")},
sidebarLayout(
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
library(shiny)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
rsconnect::setAccountInfo(name='iaekr',
token='7EA5C246F0126938314622FAF9B4AF3A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='iaekr',
token='7EA5C246F0126938314622FAF9B4AF3A',
secret='<SECRET>')
rsconnect::setAccountInfo(name='iaekr',
token='7EA5C246F0126938314622FAF9B4AF3A',
secret='HHNNdt+DqKneklPI1zINdpvWg10gu3HLooFvR1nN')
library(shiny)
# Define UI for application that draws a histogram
ui <- fluidPage(
sidebarLayout(
sidebarPanel(sliderInput("samplesize","Sample Size:",min = 100,max = 10000,value = 1000)),
mainPanel(plotOutput("distPlot"))
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
hist(rnorm(input$samplesize),col='darkorchid',xlab="Sample",main="Standard Normally Distributed Sample")},
height=300
)
}
# Run the application
shinyApp(ui = ui, server = server)
runApp('personal_app')
